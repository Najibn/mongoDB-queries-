
// {"address": {"building": "1007", "coord": [-73.856077, 40.848447], 
// "street": "Morris Park Ave", 
// "zipcode": "10462"}, 
// "borough": "Bronx",
//  "cuisine": "Bakery",
//   "grades": [{"date": {"$date": 1393804800000}, "grade": "A", "score": 2},
//     {"date": {"$date": 1378857600000}, "grade": "A", "score": 6},
//     {"date": {"$date": 1358985600000}, "grade": "A", "score": 10}, 
//     {"date": {"$date": 1322006400000}, "grade": "A", "score": 9}, 
//     {"date": {"$date": 1299715200000}, "grade": "B", "score": 14}], 
// "name": "Morris Park Bake Shop", "restaurant_id": "30075445"}

// // 1: Write a query to display all documents in the Restaurants collection.
db.Restaurants.find({})
// 2:Write a query to display the restaurant_id, name, borough, and cuisine of all documents in the Restaurants collection.
db.Restaurants.find({},{ restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })
// 3:Write a query to display the restaurant_id, name, borough, and cuisine, but excluding the _id field for all documents in the Restaurants collection.
db.Restaurants.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })
// 4:Write a query to display restaurant_id, name, borough, and zip code, but excluding the _id field for all documents in the Restaurants collection.
db.Restaurants.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1 })
// 5:Write a query to show all restaurants in the Bronx.
db.Reastaurants.find({ borough: "Bronx" })
// 6:Write a query to show the top 5 restaurants in the Bronx.
db.Restaurants.find({ borough: "Bronx" }).sort({ "grades.score": -1 }).limit(5)
// 7:Write a query to show the top 5 restaurants after skipping the first 5 that are in the Bronx.
db.Restaurants.find({ borough: "Bronx" }).skip(5).limit(5)
// 8:Write a query to find restaurants that have a score greater than 90.
db.Restaurants.find({ "grades.score": { $gt: 90 }})
// 9:Write a query to find restaurants that have a score greater than 80 but less than 100.
db.Restaurants.find({ "grades.score": { $gt: 80, $lt: 100 }})
// 10:Write a query to find restaurants that are located at a longitude less than -95.754168.
db.Restaurants.find({ "address.coord": { $lt: -95.754168 }})
// 11:Write a MongoDB query to find restaurants that do not cook 'American' food and have a score greater than 70 and a latitude less than -65.754168.
db.Restaurants.find({ cuisine: { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.1": { $lt: -65.754168 }})
// 12:Write a query to find restaurants that do not prepare 'American' food and have a score higher than 70 and that are also located at longitudes lower than -65.754168. Note : Do this query without using the $and operator.
db.Restaurants.find({ cuisine: { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65.754168 }})
// 13:Write a query to find restaurants that do not serve 'American' food, have an 'A' rating, and are not located in Brooklyn. The document should be displayed by cuisine in descending order.
db.Restaurants.find({ cuisine:{$ne: "American"}, "grades.grade": "A", borough: { $ne: "Brooklyn" }}).sort({ cuisine: -1 })
// 14:Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that contain 'Wil' in the first three letters of their name.
db.Restaurants.find({name: { $regex: /^Wil/ }}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })
// 15: find the restaurant_id, name, borough, and cuisine for those restaurants that contain 'ces' in the last three letters of their name.
db.Restaurants.find({ name: { $regex: /ces$/ }}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })
// 16:Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that contain 'Reg' anywhere in their name.
db.Restaurants.find({ name: { $regex: /Reg/ }}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })
// 17:Write a query to find restaurants in the Bronx that serve American or Chinese dishes.
db.Restaurants.find({cuisine: "American", $or: [{ cuisine: "Chinese" }], borough: "Bronx" })
// 18: find the restaurant_id, name, borough, and cuisine for those restaurants that belong to Staten Island, Queens, Bronx, or Brooklyn.
db.Restaurant.find({ name: 1, restaurant_id: 1, borough:1 , cuisine: 1}, { borough: { $in: ["Staten Island", "Queens", "Bronx", "Brooklyn"] }})
// 19:find the restaurant_id, name, borough, and cuisine for those restaurants that are NOT in Staten Island, Queens, Bronx, or Brooklyn.
db.Restaurant.find({ name: 1, restaurant_id: 1, borough:1 , cuisine: 1}, { borough: { $nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"] }})
// 20:find the restaurant_id, name, borough, and cuisine for those restaurants that get a score less than 10.
db.Restaurant.find({ -id: 0 , name: 1, restaurant_id: 1, borough:1 , cuisine: 1}, { "grades.score": { $lt: 10 }})
// 21: find the restaurant_id, name, borough, and cuisine for those restaurants that serve seafood ('seafood') except if they are 'American', 'Chinese', or the restaurant name begins with the letters 'Wil'.
db.Restaurants.find({ cuisine: "seafood", $nor: [ { cuisine: "American" }, { cuisine: "Chinese" },  { name: { $regex: "^Wil" } }]}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })
// 22:Write a query to find the restaurant_id, name, and grades for those restaurants that achieve a grade of "A" and a score of 11 with an ISODate "2014-08-11T00:00:00Z".

// 23: find the restaurant_id, name, and grades for those restaurants where the 2nd element of the grades array contains a grade of "A" and a score of 9 with an ISODate "2014-08-11T00:00:00Z".

// 24:find the restaurant_id, name, address, and geographic location for those restaurants where the second element of the array coord contains a value between 42 and 52.

// 25: sort restaurants by name in ascending order.
db.Restaurant.find().sort({ name: 1 })
// 26:sort restaurants by name in descending order.
db.Restaurant.find().sort({ name: -1 })
// 27:sort restaurants by cuisine name in ascending order and by neighborhood in descending order.
db.Restaurant.find().sort({ cuisine: 1, borough: -1 })
// 28:find out if the addresses contain the street.
db.Restaurant.find().count({ "address.street": { $exists: true }})
// 29:selects all documents in the restaurants collection where the values ​​of the coord field are of type Double.
db.Restaurant.find().count({ "address.coord": { $type: "double" }})
// 30:selects the restaurant_id, name, and grade for those restaurants that return 0 as a remainder after dividing any of their scores by 7.
db.Restaurant.find().count({ "grades.score": { $mod: 7}})
 //31 find the restaurant name, borough, longitude, latitude, and cuisine for those restaurants that contain 'mon' somewhere in their name.
db.Restaurant.find({ name: { $regex: /mon/ }}, { _id:0, name: 1, borough: 1, "address.coord": 1, cuisine: 1 })
//32 find the restaurant name, borough, longitude, latitude, and cuisine for those restaurants that contain 'Mad' as the first three letters of their name.